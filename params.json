{"name":"QueryByExample","tagline":"JPA 2 query by example (qbe), a flexible entity query API","body":"QueryByExample: Flexible JPA entity querying using example objects.\r\n\r\n\r\nTo get started using QBE, just clone and build the project:\r\n```bash\r\ngit clone git://github.com/kenglxn/QueryByExample.git\r\ncd QueryByExample/\r\nmvn clean install\r\n```\r\n\r\nand then add QBE as a dependency in your project\r\n```xml\r\n<dependency>\r\n    <groupId>net.glxn</groupId>\r\n    <artifactId>qbe</artifactId>\r\n    <version>1.2</version>\r\n</dependency>\r\n```\r\n\r\nIf you don't want to clone and build yourself, simply grab the jars from here: https://github.com/kenglxn/QueryByExample/tree/master/dist\r\n\r\nThen just run maven to install them into your local repo:\r\n```bash\r\nmvn install:install-file -Dfile=qbe-1.2.jar -DgroupId=net.glxn -DartifactId=qbe -Dversion=1.2 -Dpackaging=jar -DgeneratePom=true\r\n```\r\n\r\nDependencies:\r\n* hibernate-entitymanager\r\n\r\nExamples:\r\n\r\n```java\r\n// get a list of entities using an arbitrary pojo as example input\r\nList<Entity> resultList = \r\n    QBE.using(entityManager)\r\n        .query(Entity.class)\r\n        .by(new Pojo(\"foo\"))\r\n        .list();\r\n\r\n// get a single result using an arbitrary pojo as example input\r\nEntity item =\r\n    QBE.using(entityManager)\r\n        .query(Entity.class)\r\n        .by(new Pojo(\"foo\"))\r\n        .item();\r\n\r\n// get and work with the underlying TypedQuery object (useful e.g. for paging)\r\nTypedQuery<Entity> query =\r\n    QBE.using(entityManager)\r\n        .query(Entity.class)\r\n        .by(new Pojo(\"foo\"))\r\n        .getQuery();\r\nList<Entity> resultList =\r\n    query\r\n        .setFirstResult(0)\r\n        .setMaxResults(10)\r\n        .getResultList();\r\n\r\n// override the Matching logic (defaults to EXACT)\r\nQBE.using(entityManager)\r\n    .query(Entity.class)\r\n    .by(new Pojo(\"foo\"))\r\n    .use(Matching.EXACT);\r\nQBE.using(entityManager)\r\n    .query(Entity.class)\r\n    .by(new Pojo(\"foo\"))\r\n    .use(Matching.START);\r\nQBE.using(entityManager)\r\n    .query(Entity.class)\r\n    .by(new Pojo(\"foo\"))\r\n    .use(Matching.MIDDLE);\r\nQBE.using(entityManager)\r\n    .query(Entity.class)]\r\n    .by(new Pojo(\"foo\"))\r\n    .use(Matching.END);\r\n\r\n// override the Junction for multiple fields (defaults to UNION)\r\nList<Entity> resultList =\r\n    QBE.using(entityManager)\r\n        .query(Entity.class)\r\n        .by(example)\r\n        .use(Junction.INTERSECTION)\r\n        .list();\r\n\r\n// define the ordering of the result\r\nList<Entity> resultList =\r\n    QBE.using(entityManager)\r\n        .query(Entity.class)\r\n        .by(new Pojo(\"foo\"))\r\n        .use(Matching.START)\r\n        .orderBy(fieldToOrderBy, Order.ASCENDING)\r\n        .list();\r\n\r\n// define multiple fields for ordering semantics\r\nList<Entity> resultList =\r\n    QBE.using(entityManager)\r\n        .query(Entity.class)\r\n        .by(new Pojo(\"foo\"))\r\n        .use(Matching.START)\r\n        .orderBy(\"firstName\", Order.DESCENDING)\r\n        .orderBy(\"lastName\", Order.ASCENDING)\r\n        .list();\r\n```\r\n\r\nLicense:\r\n* http://www.apache.org/licenses/LICENSE-2.0.html\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}